{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/data.service\";\nimport * as i2 from \"@angular/common\";\nfunction AngleRangeComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Frame: \", ctx_r0.currentAngleFrameIndex + 1, \"\");\n  }\n}\nfunction AngleRangeComponent_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 12);\n  }\n  if (rf & 2) {\n    const cell_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"background-color\", cell_r4.color)(\"grid-row\", cell_r4.row + 1)(\"grid-column\", cell_r4.col + 1);\n    i0.ɵɵproperty(\"title\", \"Frame: \" + (ctx_r3.currentAngleFrameIndex + 1) + \", Row: \" + cell_r4.row + \", Col: \" + cell_r4.col + \", Value: \" + cell_r4.value.toFixed(4));\n  }\n}\nfunction AngleRangeComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵtemplate(2, AngleRangeComponent_div_6_div_2_Template, 1, 7, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10);\n    i0.ɵɵelement(4, \"div\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"grid-template-rows\", \"repeat(\" + ctx_r1.rows + \", 1fr)\")(\"grid-template-columns\", \"repeat(\" + ctx_r1.cols + \", 1fr)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.angleHeatmapCells);\n  }\n}\nfunction AngleRangeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\");\n    i0.ɵɵtext(2, \"Loading Angle-Range data...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class AngleRangeComponent {\n  constructor(dataService, cdr) {\n    this.dataService = dataService;\n    this.cdr = cdr;\n    this.currentAngleFrame = [];\n    this.angleHeatmapCells = [];\n    this.maxValue = 0;\n    this.minValue = 0;\n    this.currentAngleFrameIndex = 0;\n    this.totalAngleFrames = 0;\n    this.animationInterval = null;\n    this.animationSpeed = 1000;\n    this.rows = 0;\n    this.cols = 0;\n  }\n  ngOnInit() {\n    this.currentAngleFrameIndex = 0;\n    this.fetchAndAnimateAngle();\n  }\n  ngOnDestroy() {\n    if (this.animationInterval) {\n      clearInterval(this.animationInterval);\n    }\n  }\n  fetchAngleFrame(frameIndex, callback) {\n    this.dataService.getAngle(frameIndex).subscribe({\n      next: data => {\n        if (data && data[\"Angle-Range Map\"]) {\n          this.currentAngleFrame = this.transposeMatrix(data[\"Angle-Range Map\"]);\n          this.rows = this.currentAngleFrame.length;\n          this.cols = this.currentAngleFrame[0]?.length || 0;\n          this.maxValue = Math.max(...this.currentAngleFrame.flat());\n          this.minValue = Math.min(...this.currentAngleFrame.flat());\n          this.generateAngleHeatmapCells();\n          this.cdr.detectChanges();\n          if (callback) callback();\n        }\n      },\n      error: error => {\n        console.error('Error fetching Angle-Range frame:', error);\n        if (callback) callback();\n      }\n    });\n  }\n  fetchAndAnimateAngle() {\n    this.fetchAngleFrame(this.currentAngleFrameIndex, () => {\n      this.animationInterval = setInterval(() => {\n        if (this.currentAngleFrameIndex < 1999) {\n          this.currentAngleFrameIndex++;\n          this.fetchAngleFrame(this.currentAngleFrameIndex);\n        } else {\n          clearInterval(this.animationInterval);\n        }\n      }, this.animationSpeed);\n    });\n  }\n  transposeMatrix(matrix) {\n    if (!matrix || matrix.length === 0) return matrix;\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    const transposed = [];\n    for (let j = 0; j < cols; j++) {\n      transposed[j] = [];\n      for (let i = 0; i < rows; i++) {\n        transposed[j][i] = matrix[i][j];\n      }\n    }\n    return transposed;\n  }\n  generateAngleHeatmapCells() {\n    if (!this.currentAngleFrame || this.currentAngleFrame.length === 0) {\n      console.error('Invalid current angle frame data');\n      return;\n    }\n    this.angleHeatmapCells = [];\n    this.currentAngleFrame.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        const normalizedValue = this.maxValue !== this.minValue ? (value - this.minValue) / (this.maxValue - this.minValue) : 0;\n        const color = this.getViridisColor(normalizedValue);\n        this.angleHeatmapCells.push({\n          row: rowIndex,\n          col: colIndex,\n          value: value,\n          color: color\n        });\n      });\n    });\n  }\n  getViridisColor(normalizedValue) {\n    if (normalizedValue <= 0.25) {\n      const t = normalizedValue / 0.25;\n      const r = Math.round(68 + (59 - 68) * t);\n      const g = Math.round(1 + (82 - 1) * t);\n      const b = Math.round(84 + (139 - 84) * t);\n      return `rgb(${r}, ${g}, ${b})`;\n    } else if (normalizedValue <= 0.5) {\n      const t = (normalizedValue - 0.25) / 0.25;\n      const r = Math.round(59 + (33 - 59) * t);\n      const g = Math.round(82 + (144 - 82) * t);\n      const b = Math.round(139 + (140 - 139) * t);\n      return `rgb(${r}, ${g}, ${b})`;\n    } else if (normalizedValue <= 0.75) {\n      const t = (normalizedValue - 0.5) / 0.25;\n      const r = Math.round(33 + (94 - 33) * t);\n      const g = Math.round(144 + (201 - 144) * t);\n      const b = Math.round(140 + (98 - 140) * t);\n      return `rgb(${r}, ${g}, ${b})`;\n    } else {\n      const t = (normalizedValue - 0.75) / 0.25;\n      const r = Math.round(94 + (253 - 94) * t);\n      const g = Math.round(201 + (231 - 201) * t);\n      const b = Math.round(98 + (37 - 98) * t);\n      return `rgb(${r}, ${g}, ${b})`;\n    }\n  }\n  static {\n    this.ɵfac = function AngleRangeComponent_Factory(t) {\n      return new (t || AngleRangeComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AngleRangeComponent,\n      selectors: [[\"app-angle-range\"]],\n      decls: 8,\n      vars: 3,\n      consts: [[1, \"doppler-range-container\"], [1, \"doppler-header\"], [\"class\", \"frame-info\", 4, \"ngIf\"], [1, \"doppler-visualization\"], [\"class\", \"heatmap-container\", 4, \"ngIf\"], [\"class\", \"loading-state\", 4, \"ngIf\"], [1, \"frame-info\"], [1, \"heatmap-container\"], [1, \"heatmap-grid\"], [\"class\", \"heatmap-cell\", 3, \"background-color\", \"grid-row\", \"grid-column\", \"title\", 4, \"ngFor\", \"ngForOf\"], [1, \"color-bar\"], [1, \"color-gradient\"], [1, \"heatmap-cell\", 3, \"title\"], [1, \"loading-state\"]],\n      template: function AngleRangeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\");\n          i0.ɵɵtext(3, \"Angle-Range Map (Live Plot)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(4, AngleRangeComponent_div_4_Template, 3, 1, \"div\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 3);\n          i0.ɵɵtemplate(6, AngleRangeComponent_div_6_Template, 5, 5, \"div\", 4);\n          i0.ɵɵtemplate(7, AngleRangeComponent_div_7_Template, 3, 0, \"div\", 5);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.angleHeatmapCells.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.angleHeatmapCells.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.angleHeatmapCells.length === 0);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf],\n      styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\tvar __webpack_modules__ = ({\\n\\n\\n 690:\\n\\n\\n\\n\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\n\\\\nSyntaxError\\\\n\\\\n(52:1) C:\\\\\\\\Users\\\\\\\\hibab\\\\\\\\Desktop\\\\\\\\WLCN\\\\\\\\frontend\\\\\\\\src\\\\\\\\app\\\\\\\\components\\\\\\\\angle-range\\\\\\\\angle-range.component.css Unclosed block\\\\n\\\\n \\\\u001b[90m 50 | \\\\u001b[39m\\\\u001b[33m}\\\\u001b[39m\\\\n \\\\u001b[90m 51 | \\\\u001b[39m\\\\n\\\\u001b[1m\\\\u001b[31m>\\\\u001b[39m\\\\u001b[22m\\\\u001b[90m 52 | \\\\u001b[39m\\\\u001b[33m.angle-display\\\\u001b[39m \\\\u001b[33m{\\\\u001b[39m\\\\n \\\\u001b[90m    | \\\\u001b[39m\\\\u001b[1m\\\\u001b[31m^\\\\u001b[39m\\\\u001b[22m\\\\n \\\\u001b[90m 53 | \\\\u001b[39m  font-size\\\\u001b[33m:\\\\u001b[39m 1.5rem\\\\u001b[33m;\\\\u001b[39m\\\\n \\\\u001b[90m 54 | \\\\u001b[39m\\\\n\\\");\\n\\n\\n })\\n\\n\\n \\t});\\n\\n\\n\\n \\t\\n\\n \\t// startup\\n\\n \\t// Load entry module and return exports\\n\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n\\n \\tvar __webpack_exports__ = {};\\n\\n \\t__webpack_modules__[690]();\\n\\n \\tresource = __webpack_exports__;\\n\\n \\t\\n\\n })()\\n;\\n/*# sourceMappingURL=angle-range.component.css.map*/\"]\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","currentAngleFrameIndex","ɵɵelement","ɵɵstyleProp","cell_r4","color","row","col","ɵɵproperty","ctx_r3","value","toFixed","ɵɵtemplate","AngleRangeComponent_div_6_div_2_Template","ctx_r1","rows","cols","angleHeatmapCells","AngleRangeComponent","constructor","dataService","cdr","currentAngleFrame","maxValue","minValue","totalAngleFrames","animationInterval","animationSpeed","ngOnInit","fetchAndAnimateAngle","ngOnDestroy","clearInterval","fetchAngleFrame","frameIndex","callback","getAngle","subscribe","next","data","transposeMatrix","length","Math","max","flat","min","generateAngleHeatmapCells","detectChanges","error","console","setInterval","matrix","transposed","j","i","forEach","rowIndex","colIndex","normalizedValue","getViridisColor","push","t","r","round","g","b","ɵɵdirectiveInject","i1","DataService","ChangeDetectorRef","selectors","decls","vars","consts","template","AngleRangeComponent_Template","rf","ctx","AngleRangeComponent_div_4_Template","AngleRangeComponent_div_6_Template","AngleRangeComponent_div_7_Template"],"sources":["C:\\Users\\hibab\\Desktop\\WLCN\\frontend\\src\\app\\components\\angle-range\\angle-range.component.ts","C:\\Users\\hibab\\Desktop\\WLCN\\frontend\\src\\app\\components\\angle-range\\angle-range.component.html"],"sourcesContent":["\r\nimport { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { DataService } from '../../services/data.service';\r\n\r\n@Component({\r\n  selector: 'app-angle-range',\r\n  templateUrl: './angle-range.component.html',\r\n  styleUrls: ['./angle-range.component.css']\r\n})\r\nexport class AngleRangeComponent implements OnInit, OnDestroy {\r\n  currentAngleFrame: number[][] = [];\r\n  angleHeatmapCells: Array<{row: number, col: number, value: number, color: string}> = [];\r\n  maxValue: number = 0;\r\n  minValue: number = 0;\r\n  currentAngleFrameIndex: number = 0;\r\n  totalAngleFrames: number = 0;\r\n  animationInterval: any = null;\r\n  animationSpeed: number = 1000;\r\n  rows: number = 0;\r\n  cols: number = 0;\r\n\r\n  constructor(private dataService: DataService, private cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currentAngleFrameIndex = 0;\r\n    this.fetchAndAnimateAngle();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.animationInterval) {\r\n      clearInterval(this.animationInterval);\r\n    }\r\n  }\r\n\r\n  fetchAngleFrame(frameIndex: number, callback?: () => void): void {\r\n    this.dataService.getAngle(frameIndex).subscribe({\r\n      next: (data: any) => {\r\n        if (data && data[\"Angle-Range Map\"]) {\r\n          this.currentAngleFrame = this.transposeMatrix(data[\"Angle-Range Map\"]);\r\n          this.rows = this.currentAngleFrame.length;\r\n          this.cols = this.currentAngleFrame[0]?.length || 0;\r\n          this.maxValue = Math.max(...this.currentAngleFrame.flat());\r\n          this.minValue = Math.min(...this.currentAngleFrame.flat());\r\n          this.generateAngleHeatmapCells();\r\n          this.cdr.detectChanges();\r\n          if (callback) callback();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error fetching Angle-Range frame:', error);\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  fetchAndAnimateAngle(): void {\r\n    this.fetchAngleFrame(this.currentAngleFrameIndex, () => {\r\n      this.animationInterval = setInterval(() => {\r\n        if (this.currentAngleFrameIndex < 1999) {\r\n          this.currentAngleFrameIndex++;\r\n          this.fetchAngleFrame(this.currentAngleFrameIndex);\r\n        } else {\r\n          clearInterval(this.animationInterval);\r\n        }\r\n      }, this.animationSpeed);\r\n    });\r\n  }\r\n\r\n  private transposeMatrix(matrix: number[][]): number[][] {\r\n    if (!matrix || matrix.length === 0) return matrix;\r\n    const rows = matrix.length;\r\n    const cols = matrix[0].length;\r\n    const transposed: number[][] = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      transposed[j] = [];\r\n      for (let i = 0; i < rows; i++) {\r\n        transposed[j][i] = matrix[i][j];\r\n      }\r\n    }\r\n    return transposed;\r\n  }\r\n\r\n  private generateAngleHeatmapCells(): void {\r\n    if (!this.currentAngleFrame || this.currentAngleFrame.length === 0) {\r\n      console.error('Invalid current angle frame data');\r\n      return;\r\n    }\r\n    this.angleHeatmapCells = [];\r\n    this.currentAngleFrame.forEach((row: number[], rowIndex: number) => {\r\n      row.forEach((value: number, colIndex: number) => {\r\n        const normalizedValue = this.maxValue !== this.minValue \r\n          ? (value - this.minValue) / (this.maxValue - this.minValue)\r\n          : 0;\r\n        const color = this.getViridisColor(normalizedValue);\r\n        this.angleHeatmapCells.push({\r\n          row: rowIndex,\r\n          col: colIndex,\r\n          value: value,\r\n          color: color\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  private getViridisColor(normalizedValue: number): string {\r\n    if (normalizedValue <= 0.25) {\r\n      const t = normalizedValue / 0.25;\r\n      const r = Math.round(68 + (59 - 68) * t);\r\n      const g = Math.round(1 + (82 - 1) * t);\r\n      const b = Math.round(84 + (139 - 84) * t);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    } else if (normalizedValue <= 0.5) {\r\n      const t = (normalizedValue - 0.25) / 0.25;\r\n      const r = Math.round(59 + (33 - 59) * t);\r\n      const g = Math.round(82 + (144 - 82) * t);\r\n      const b = Math.round(139 + (140 - 139) * t);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    } else if (normalizedValue <= 0.75) {\r\n      const t = (normalizedValue - 0.5) / 0.25;\r\n      const r = Math.round(33 + (94 - 33) * t);\r\n      const g = Math.round(144 + (201 - 144) * t);\r\n      const b = Math.round(140 + (98 - 140) * t);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    } else {\r\n      const t = (normalizedValue - 0.75) / 0.25;\r\n      const r = Math.round(94 + (253 - 94) * t);\r\n      const g = Math.round(201 + (231 - 201) * t);\r\n      const b = Math.round(98 + (37 - 98) * t);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    }\r\n  }\r\n}\r\n","\r\n\r\n<div class=\"doppler-range-container\">\r\n  <div class=\"doppler-header\">\r\n    <h3>Angle-Range Map (Live Plot)</h3>\r\n    <div class=\"frame-info\" *ngIf=\"angleHeatmapCells.length > 0\">\r\n      <span>Frame: {{ currentAngleFrameIndex + 1 }}</span>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"doppler-visualization\">\r\n    <div class=\"heatmap-container\" *ngIf=\"angleHeatmapCells.length > 0\">\r\n      <div class=\"heatmap-grid\" \r\n           [style.grid-template-rows]=\"'repeat(' + rows + ', 1fr)'\"\r\n           [style.grid-template-columns]=\"'repeat(' + cols + ', 1fr)'\">\r\n        <div *ngFor=\"let cell of angleHeatmapCells\" \r\n             class=\"heatmap-cell\"\r\n             [style.background-color]=\"cell.color\"\r\n             [style.grid-row]=\"cell.row + 1\"\r\n             [style.grid-column]=\"cell.col + 1\"\r\n             [title]=\"'Frame: ' + (currentAngleFrameIndex + 1) + ', Row: ' + cell.row + ', Col: ' + cell.col + ', Value: ' + cell.value.toFixed(4)\">\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Color Bar Legend -->\r\n      <div class=\"color-bar\">\r\n        <div class=\"color-gradient\"></div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Loading state -->\r\n    <div *ngIf=\"angleHeatmapCells.length === 0\" class=\"loading-state\">\r\n      <p>Loading Angle-Range data...</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}