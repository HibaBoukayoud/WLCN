{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AngleRangeComponent = class AngleRangeComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.plotData = [];\n    this.plotLayout = {};\n    this.currentFrameIndex = 0;\n    this.totalFrames = 0;\n    this.animationInterval = null;\n    this.animationSpeed = 1000;\n    this.heatmapCells = [];\n    this.rows = 0;\n    this.cols = 0;\n  }\n  ngOnInit() {\n    this.currentFrameIndex = 0;\n    this.fetchAndAnimate();\n  }\n  ngOnDestroy() {\n    if (this.animationInterval) {\n      clearInterval(this.animationInterval);\n    }\n  }\n  fetchAngleFrame(frameIndex, callback) {\n    console.log('[FRONTEND] Richiesta frame Angle:', frameIndex);\n    this.dataService.getAngle(frameIndex).subscribe({\n      next: data => {\n        console.log('[FRONTEND] Ricevuto frame Angle:', frameIndex, 'Data:', data);\n        if (data && data[\"Angle-Range Map\"]) {\n          this.totalFrames = data[\"available_frames\"] || 1;\n          const map = data[\"Angle-Range Map\"];\n          this.rows = map.length;\n          this.cols = map[0]?.length || 0;\n          // Flatten and colorize\n          const flat = [];\n          let min = Infinity,\n            max = -Infinity;\n          for (let r = 0; r < this.rows; r++) {\n            for (let c = 0; c < this.cols; c++) {\n              const v = map[r][c];\n              if (v < min) min = v;\n              if (v > max) max = v;\n            }\n          }\n          function viridisColor(val, min, max) {\n            const t = (val - min) / (max - min || 1);\n            const stops = [[68, 1, 84], [71, 44, 122], [59, 81, 139], [44, 113, 142], [33, 144, 141], [39, 173, 129], [92, 200, 99], [170, 220, 50], [253, 231, 37]];\n            const idx = Math.floor(t * (stops.length - 1));\n            const [r, g, b] = stops[idx];\n            return `rgb(${r},${g},${b})`;\n          }\n          for (let r = 0; r < this.rows; r++) {\n            for (let c = 0; c < this.cols; c++) {\n              flat.push({\n                row: r,\n                col: c,\n                value: map[r][c],\n                color: viridisColor(map[r][c], min, max)\n              });\n            }\n          }\n          this.heatmapCells = flat;\n          console.log('[FRONTEND] Aggiornata heatmapCells, frame:', frameIndex, 'cells:', flat.length);\n          if (callback) callback();\n        } else {\n          this.heatmapCells = [];\n          console.warn('[FRONTEND] Nessun dato Angle-Range Map per frame:', frameIndex);\n        }\n      },\n      error: error => {\n        console.error('[FRONTEND] Errore fetch Angle-Range frame:', frameIndex, error);\n        this.heatmapCells = [];\n        if (callback) callback();\n      }\n    });\n  }\n  fetchAndAnimate() {\n    if (this.animationInterval) {\n      clearInterval(this.animationInterval);\n    }\n    this.fetchAngleFrame(this.currentFrameIndex, () => {\n      if (this.totalFrames > 1) {\n        this.animationInterval = setInterval(() => {\n          if (this.currentFrameIndex < this.totalFrames - 1) {\n            this.currentFrameIndex++;\n          } else {\n            this.currentFrameIndex = 0;\n          }\n          this.fetchAngleFrame(this.currentFrameIndex);\n        }, 10);\n      }\n    });\n  }\n};\nAngleRangeComponent = __decorate([Component({\n  selector: 'app-angle-range',\n  templateUrl: './angle-range.component.html',\n  styleUrls: ['./angle-range.component.css']\n})], AngleRangeComponent);","map":{"version":3,"names":["Component","AngleRangeComponent","constructor","dataService","plotData","plotLayout","currentFrameIndex","totalFrames","animationInterval","animationSpeed","heatmapCells","rows","cols","ngOnInit","fetchAndAnimate","ngOnDestroy","clearInterval","fetchAngleFrame","frameIndex","callback","console","log","getAngle","subscribe","next","data","map","length","flat","min","Infinity","max","r","c","v","viridisColor","val","t","stops","idx","Math","floor","g","b","push","row","col","value","color","warn","error","setInterval","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\hibab\\Desktop\\WLCN\\frontend\\src\\app\\components\\angle-range\\angle-range.component.ts"],"sourcesContent":["\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { DataService } from '../../services/data.service';\r\n\r\n@Component({\r\n  selector: 'app-angle-range',\r\n  templateUrl: './angle-range.component.html',\r\n  styleUrls: ['./angle-range.component.css']\r\n})\r\nexport class AngleRangeComponent implements OnInit, OnDestroy {\r\n  plotData: any[] = [];\r\n  plotLayout: any = {};\r\n  currentFrameIndex: number = 0;\r\n  totalFrames: number = 0;\r\n  animationInterval: any = null;\r\n  animationSpeed: number = 1000;\r\n\r\n  heatmapCells: Array<{row: number, col: number, value: number, color: string}> = [];\r\n  rows: number = 0;\r\n  cols: number = 0;\r\n\r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currentFrameIndex = 0;\r\n    this.fetchAndAnimate();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.animationInterval) {\r\n      clearInterval(this.animationInterval);\r\n    }\r\n  }\r\n\r\n  fetchAngleFrame(frameIndex: number, callback?: () => void): void {\r\n    console.log('[FRONTEND] Richiesta frame Angle:', frameIndex);\r\n    this.dataService.getAngle(frameIndex).subscribe({\r\n      next: (data: any) => {\r\n        console.log('[FRONTEND] Ricevuto frame Angle:', frameIndex, 'Data:', data);\r\n        if (data && data[\"Angle-Range Map\"]) {\r\n          this.totalFrames = data[\"available_frames\"] || 1;\r\n          const map = data[\"Angle-Range Map\"];\r\n          this.rows = map.length;\r\n          this.cols = map[0]?.length || 0;\r\n          // Flatten and colorize\r\n          const flat: Array<{row: number, col: number, value: number, color: string}> = [];\r\n          let min = Infinity, max = -Infinity;\r\n          for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n              const v = map[r][c];\r\n              if (v < min) min = v;\r\n              if (v > max) max = v;\r\n            }\r\n          }\r\n          function viridisColor(val: number, min: number, max: number): string {\r\n            const t = (val - min) / (max - min || 1);\r\n            const stops = [\r\n              [68, 1, 84], [71, 44, 122], [59, 81, 139], [44, 113, 142],\r\n              [33, 144, 141], [39, 173, 129], [92, 200, 99], [170, 220, 50], [253, 231, 37]\r\n            ];\r\n            const idx = Math.floor(t * (stops.length - 1));\r\n            const [r, g, b] = stops[idx];\r\n            return `rgb(${r},${g},${b})`;\r\n          }\r\n          for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n              flat.push({\r\n                row: r,\r\n                col: c,\r\n                value: map[r][c],\r\n                color: viridisColor(map[r][c], min, max)\r\n              });\r\n            }\r\n          }\r\n          this.heatmapCells = flat;\r\n          console.log('[FRONTEND] Aggiornata heatmapCells, frame:', frameIndex, 'cells:', flat.length);\r\n          if (callback) callback();\r\n        } else {\r\n          this.heatmapCells = [];\r\n          console.warn('[FRONTEND] Nessun dato Angle-Range Map per frame:', frameIndex);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('[FRONTEND] Errore fetch Angle-Range frame:', frameIndex, error);\r\n        this.heatmapCells = [];\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  fetchAndAnimate(): void {\r\n    if (this.animationInterval) {\r\n      clearInterval(this.animationInterval);\r\n    }\r\n    this.fetchAngleFrame(this.currentFrameIndex, () => {\r\n      if (this.totalFrames > 1) {\r\n        this.animationInterval = setInterval(() => {\r\n          if (this.currentFrameIndex < this.totalFrames - 1) {\r\n            this.currentFrameIndex++;\r\n          } else {\r\n            this.currentFrameIndex = 0;\r\n          }\r\n          this.fetchAngleFrame(this.currentFrameIndex);\r\n        }, 10);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}